{"version":3,"sources":["webpack:///bootstrapper.bundle.js","webpack:///./client/bootstrapper/main.js"],"names":["webpackJsonp",0,"module","exports","__webpack_require__",525,"_interopRequireDefault","obj","__esModule","default","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_nprogressNprogressJs","_nprogressNprogressJs2","Bootstrapper","this","load","value","percent","console","log","set","url","_this","req","XMLHttpRequest","addEventListener","event","lengthComputable","percentComplete","loaded","total","progress","e","s","document","createElement","innerHTML","responseText","documentElement","appendChild","start","open","send"],"mappings":"AAAAA,cAAc,IAERC,EACA,SAASC,EAAQC,EAASC,GAE/BF,EAAOC,QAAUC,EAAoB,MAKhCC,IACA,SAASH,EAAQC,EAASC,GCDhC,YAIA,SAASE,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAAWF,GAEzF,QAASG,GAAgBC,EAAUC,GAAe,KAAMD,YAAoBC,IAAgB,KAAM,IAAIC,WAAU,qCAJhH,GAAIC,GAAe,WAAe,QAASC,GAAiBC,EAAQC,GAAS,IAAK,GAAIC,GAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAE,GAAIE,GAAaH,EAAMC,EAAIE,GAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,SAAWF,KAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeT,EAAQI,EAAWM,IAAKN,IAAiB,MAAO,UAAUR,EAAae,EAAYC,GAAiJ,MAA9HD,IAAYZ,EAAiBH,EAAYiB,UAAWF,GAAiBC,GAAab,EAAiBH,EAAagB,GAAqBhB,MAM7hBkB,EAAwB1B,EARN,KAUlB2B,EAAyBzB,EAAuBwB,EAEpD1B,GAXO,IAaP,IAXM4B,GAAY,WACL,QADPA,KAaFtB,EAAgBuB,KAbdD,GAEFC,KAAKC,KAAK,0BA0DZ,MA1CApB,GAlBIkB,IAmBFN,IAAK,WACLS,MAfM,SAACC,GACPC,QAAQC,IAAI,WAAYF,GACxBL,EAAA,WAAUQ,IAAIH,MAkBdV,IAAK,OACLS,MAhBE,SAACK,GAiBD,GAAIC,GAAQR,KAhBVS,EAAM,GAAIC,eAEdD,GAAIE,iBAAiB,WAAY,SAACC,GAChC,GAAIA,EAAMC,iBAAkB,CAC1B,GAAIC,GAAkBF,EAAMG,OAASH,EAAMI,KAC3CR,GAAKS,SAASH,OAGdV,SAAQC,IAAI,mCAEb,GAGHI,EAAIE,iBAAiB,OAAQ,SAACC,GAC5B,GAAIM,GAAIN,EAAM7B,OACVoC,EAAIC,SAASC,cAAc,SAC/BF,GAAEG,UAAYJ,EAAEK,aAEhBH,SAASI,gBAAgBC,YAAYN,GAErCA,EAAER,iBAAiB,OAAQ,gBAG1B,GAEHb,EAAA,WAAU4B,QACVjB,EAAIkB,KAAK,MAAOpB,GAChBE,EAAImB,WAtCF7B,IA0CN,IAAIA","file":"bootstrapper.bundle.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(525);\n\n\n/***/ },\n\n/***/ 525:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * bootstrapper is used to show loading progress before\n\t * the actual program is loaded\n\t */\n\t\n\t/* globals: NProgress */\n\t\n\t// import 'pace/pace.js';\n\t// import 'pace/themes/orange/pace-theme-minimal.css';\n\t\n\t'use strict';\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\t\n\tvar _nprogressNprogressJs = __webpack_require__(199);\n\t\n\tvar _nprogressNprogressJs2 = _interopRequireDefault(_nprogressNprogressJs);\n\t\n\t__webpack_require__(200);\n\t\n\tvar Bootstrapper = (function () {\n\t  function Bootstrapper() {\n\t    _classCallCheck(this, Bootstrapper);\n\t\n\t    this.load('./public/app.bundle.js');\n\t  }\n\t\n\t  _createClass(Bootstrapper, [{\n\t    key: 'progress',\n\t    value: function progress(percent) {\n\t      console.log('percent:', percent);\n\t      _nprogressNprogressJs2['default'].set(percent);\n\t    }\n\t  }, {\n\t    key: 'load',\n\t    value: function load(url) {\n\t      var _this = this;\n\t\n\t      var req = new XMLHttpRequest();\n\t      // report progress events\n\t      req.addEventListener(\"progress\", function (event) {\n\t        if (event.lengthComputable) {\n\t          var percentComplete = event.loaded / event.total;\n\t          _this.progress(percentComplete);\n\t        } else {\n\t          // Unable to compute progress information since the total size is unknown\n\t          console.log('cannot get the loading length');\n\t        }\n\t      }, false);\n\t\n\t      // load responseText into a new script element\n\t      req.addEventListener(\"load\", function (event) {\n\t        var e = event.target;\n\t        var s = document.createElement(\"script\");\n\t        s.innerHTML = e.responseText;\n\t        // or: s[s.innerText!=undefined?\"innerText\":\"textContent\"] = e.responseText\n\t        document.documentElement.appendChild(s);\n\t\n\t        s.addEventListener(\"load\", function () {\n\t          // this runs after the new script has been executed...\n\t        });\n\t      }, false);\n\t\n\t      _nprogressNprogressJs2['default'].start();\n\t      req.open(\"GET\", url);\n\t      req.send();\n\t    }\n\t  }]);\n\t\n\t  return Bootstrapper;\n\t})();\n\t\n\tnew Bootstrapper();\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** bootstrapper.bundle.js\n **/","/**\n * bootstrapper is used to show loading progress before\n * the actual program is loaded\n */\n\n/* globals: NProgress */\n\n// import 'pace/pace.js';\n// import 'pace/themes/orange/pace-theme-minimal.css';\n\nimport NProgress from 'nprogress/nprogress.js';\nimport 'nprogress/nprogress.css';\n\nclass Bootstrapper {\n  constructor() {\n    this.load('./public/app.bundle.js');\n  }\n\n  progress(percent) {\n    console.log('percent:', percent);\n    NProgress.set(percent);\n  }\n\n  load(url) {\n    let req = new XMLHttpRequest();\n    // report progress events\n    req.addEventListener(\"progress\", (event) => {\n      if (event.lengthComputable) {\n        let percentComplete = event.loaded / event.total;\n        this.progress(percentComplete);\n      } else {\n        // Unable to compute progress information since the total size is unknown\n        console.log('cannot get the loading length');\n      }\n    }, false);\n\n    // load responseText into a new script element\n    req.addEventListener(\"load\", (event) => {\n      let e = event.target;\n      let s = document.createElement(\"script\");\n      s.innerHTML = e.responseText;\n      // or: s[s.innerText!=undefined?\"innerText\":\"textContent\"] = e.responseText\n      document.documentElement.appendChild(s);\n\n      s.addEventListener(\"load\", function() {\n        // this runs after the new script has been executed...\n      });\n    }, false);\n\n    NProgress.start();\n    req.open(\"GET\", url);\n    req.send();\n  }\n}\n\nnew Bootstrapper();\n\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./client/bootstrapper/main.js\n **/"],"sourceRoot":""}